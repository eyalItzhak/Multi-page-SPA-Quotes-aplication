{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","useState","isEntering","setIsEntering","authorInputRef","useRef","textInputRef","when","message","location","onFocus","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","length","onAddQuote","author","text","alert","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","NewQuote","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","push","quoteData"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,iGCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,yBCiE/BC,EA3DG,SAACL,GAEjB,MAAiCM,oBAAS,GAA1C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EAAiBC,mBACjBC,EAAeD,mBA0BrB,OACE,eAAC,WAAD,WACA,cAAC,IAAD,CAAQE,KAAML,EAAYM,QAAU,SAACC,GAAD,MAAY,yEAChD,cAAC,EAAD,UACE,uBAAMC,QAZiB,WACzBP,GAAc,IAWuBP,UAAWC,IAAQc,KAAMC,SA5BhE,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBX,EAAeY,QAAQC,MACvCC,EAAcZ,EAAaU,QAAQC,MAGf,IAAxBF,EAAcI,QAAoC,IAAtBD,EAAYC,OAK1CxB,EAAMyB,WAAW,CAAEC,OAAQN,EAAeO,KAAMJ,IAJ/CK,MAAM,8BAoBL,UACG5B,EAAM6B,WACL,qBAAK5B,UAAWC,IAAQ4B,QAAxB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAK9B,UAAWC,IAAQ8B,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAK3B,OAEtC,sBAAKR,UAAWC,IAAQ8B,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKzB,OAEpC,qBAAKV,UAAWC,IAAQoC,QAAxB,SACE,wBAAQC,QAxBc,WAC5B/B,GAAc,IAuBgCP,UAAU,MAAlD,kC,gBCjCKuC,UAnBE,WACf,MAA6BC,YAAQC,KAA9BC,EAAP,EAAOA,YAAYC,EAAnB,EAAmBA,OACbC,EAAUC,cAEhBC,qBAAU,WACM,cAATH,GACDC,EAAQG,KAAK,aAGjB,CAACJ,EAAOC,IAOV,OAAO,cAAC,EAAD,CAAWhB,UAAoB,YAATe,EAAoBnB,WALzB,SAAAwB,GACtBN,EAAYM","file":"static/js/6.7ce5b8e5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__2zxEb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__2Jqvd\",\"loading\":\"QuoteForm_loading__2khIx\",\"control\":\"QuoteForm_control__bQRlY\",\"actions\":\"QuoteForm_actions__3Gf5A\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { useRef ,useState } from 'react';\n\nimport { Prompt } from 'react-router-dom';\nimport { Fragment } from 'react/cjs/react.production.min';\n\nimport Card from '../UI/Card';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\n\nconst QuoteForm = (props) => {\n\n  const [isEntering,setIsEntering]=useState(false)\n\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // some basic validation\n   if(enteredAuthor.length ===0 ||enteredText.length ===0 ){\n     alert(\"Author or Text is empty! \")\n     return\n   }\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n\n  const formFocusedHandler = ()=>{\n    setIsEntering(true);\n  }\n\n  const finishEnteringHandler = ()=>{\n    setIsEntering(false);\n  }\n\n  return (\n    <Fragment>\n    <Prompt when={isEntering} message ={(location)=>\"Are you sure you want to leave? All your entered data will be lost!\"}/>\n    <Card>\n      <form onFocus={formFocusedHandler} className={classes.form} onSubmit={submitFormHandler}>\n        {props.isLoading && (\n          <div className={classes.loading}>\n            <LoadingSpinner />\n          </div>\n        )}\n\n        <div className={classes.control}>\n          <label htmlFor='author'>Author</label>\n          <input type='text' id='author' ref={authorInputRef} />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor='text'>Text</label>\n          <textarea id='text' rows='5' ref={textInputRef}></textarea>\n        </div>\n        <div className={classes.actions}>\n          <button onClick={finishEnteringHandler} className='btn'>Add Quote</button>\n        </div>\n      </form>\n    </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport QuoteForm from \"../components/quotes/QuoteForm\"\n\nimport useHttp from \"../hooks/use-http\"\nimport { addQuote } from \"../lib/api\";\n\nconst NewQuote = () => {\n  const {sendRequest,status} = useHttp(addQuote)\n  const history = useHistory();\n\n  useEffect(()=>{\n      if(status==='completed'){\n        history.push('/quotes')\n      }\n\n  },[status,history])\n\n  const addQuoteHandler = quoteData =>{\n    sendRequest(quoteData)\n  }\n\n\n  return <QuoteForm isLoading={status==='pending'} onAddQuote={addQuoteHandler}/>\n};\n\nexport default NewQuote;"],"sourceRoot":""}